$(document).ready(function()
{

  function ScatterPlot(plot_ref) {
    
console.log("SEtup globals");
    //////////////////////////////////////////////////////////////////////////////////////////
    // Setup global variables.
    //////////////////////////////////////////////////////////////////////////////////////////

    this.plot_ref = plot_ref;

    this.model = null;
    this.input_columns = null;
    this.output_columns = null;
    this.image_columns = null;
    this.rating_columns = null;
    this.category_columns = null;

    this.bookmarker = new bookmark_manager("{{server-root}}", "{{#full-project}}{{_id}}{{/full-project}}", "{{_id}}");
    this.bookmark = null;

    this.table_metadata = null;
    this.table_statistics = null;
    this.indices = null;
    this.x_index = null;
    this.y_index = null;
    this.v_index = null;
    this.images_index = null;
    this.x = null;
    this.y = null;
    this.v = null;
    this.images = null;
    this.selected_simulations = null;
    this.hidden_simulations = null;

    this.table_ready = false;
    this.scatterplot_ready = false;
    this.grid_ready = false;
    this.controls_ready = false;

    this.session_cache = {};
    this.image_uri = document.createElement("a");
  }

  ScatterPlot.prototype.load_model = function() {
    var this_scatter_plot = this;
    //////////////////////////////////////////////////////////////////////////////////////////
    // Load the model
    //////////////////////////////////////////////////////////////////////////////////////////
console.log("LOAD THE MODEL 1 -- ajax");
    $.ajax(
    {
      type : "GET",
      url : "{{server-root}}models/{{_id}}",
      success : function(result)
      {
        model = result;
        input_columns = model["artifact:input-columns"];
        output_columns = model["artifact:output-columns"];
        image_columns = model["artifact:image-columns"];
        rating_columns = model["artifact:rating-columns"] == undefined ? [] : model["artifact:rating-columns"];
        category_columns = model["artifact:category-columns"] == undefined ? [] : model["artifact:category-columns"];
        this_scatter_plot.model_loaded();
      },
      error: function(request, status, reason_phrase)
      {
        window.alert("Error retrieving model: " + reason_phrase);
      }
    });
  };

  //////////////////////////////////////////////////////////////////////////////////////////
  // Once the model has been loaded, retrieve metadata / bookmarked state
  //////////////////////////////////////////////////////////////////////////////////////////

  ScatterPlot.prototype.model_loaded = function() {
    var this_scatter_plot = this;
console.log("Inside model_loaded()");
    if(model["state"] == "waiting" || model["state"] == "running")
    {
      $("#status-messages").empty().html(
        "<div class='error-heading'>Oops, this model isn't ready yet.</div>" +
        "<div class='error-description'>We're probabably building it for you right now." +
        "Watch the status bar for progress information and more details.</div>");
      show_status_messages();
    }
    else if(model["state"] == "closed" && model["result"] === null)
    {
      $("#status-messages").empty().html(
        "<div class='error-heading'>Oops, it looks like this model was never completed.</div>" +
        "<div class='error-description'>Here's the last thing that was happening before it was closed:</div>" +
        "<pre>" + model["message"] + "</pre>");
      show_status_messages();
    }
    else if(model["result"] == "failed")
    {
      $("#status-messages").empty().html(
        "<div class='error-heading'>Oops, it looks like this model failed to build.</div>" +
        "<div class='error-description'>Here's what was happening when it ended:</div>" +
        "<pre>" + model["message"] + "</pre>");
      show_status_messages();
    }
    else
    {
      // Display progress as the load happens ...
      $(".load-status").text("Loading data.");

      // Mark this model as closed, so it doesn't show-up in the header anymore.
console.log("mark this model as closed -- ajax");
      $.ajax(
      {
        type : "PUT",
        url : "{{server-root}}models/{{_id}}",
        contentType : "application/json",
        data : $.toJSON({
          "state" : "closed"
        }),
        processData : false
      });

console.log("Inside model laoded - load table metadata 1 -- ajax");
      // Load data table metadata.
      $.ajax({
        url : "{{server-root}}models/{{_id}}/tables/data-table/arrays/0/metadata?index=Index",
        contentType : "application/json",
        success: function(metadata)
        {
          this.table_metadata = metadata;
          table_statistics = new Array(metadata["column-count"]);
          table_statistics[metadata["column-count"]-1] = {"max": metadata["row-count"]-1, "min": 0};
          this_scatter_plot.load_table_statistics(d3.range(metadata["column-count"]-1), this_scatter_plot.metadata_loaded);
        },
        error: this_scatter_plot.artifact_missing
      });

      // Retrieve bookmarked state information ...
      this.bookmarker.get_state(function(state)
      {
        bookmark = state;
        this_scatter_plot.setup_colorswitcher();
        this_scatter_plot.metadata_loaded();
      });
    }
  };

  ScatterPlot.prototype.show_status_messages = function() {
console.log("Inside show_status_messages()");
    $("#status-messages").dialog(
    {
      autoOpen: true,
      width: 500,
      height: 300,
      modal: false,
      buttons:
      {
        OK: function()
        {
          $("#status-messages").dialog("close");
        }
      }
    });
  };

  ScatterPlot.prototype.artifact_missing = function() {
console.log("Inside artifact_missing()");
    $(".load-status").css("display", "none");

    $("#status-messages").empty().html(
      "<div class='error-heading'>Oops, there was a problem retrieving data from the model.</div>" +
      "<div class='error-description'>This probably means that there was a problem building the model. " +
      "Here's the last thing that was going on with it:</div>" +
      "<pre>" + model["message"] + "</pre>");

    show_status_messages();
  };

  //////////////////////////////////////////////////////////////////////////////////////////
  // Setup page layout and forms.
  //////////////////////////////////////////////////////////////////////////////////////////

  // Setup the edit model form ...
  ScatterPlot.prototype.setup_layout = function() {
    $("#edit-model-form").dialog(
    {
      autoOpen: false,
      width: 700,
      height: 300,
      modal: true,
      buttons:
      {
        "Save Changes": function()
        {
          var model =
          {
            "name" : $("#edit-model-name").val(),
            "description" : $("#edit-model-description").val()
          };

  console.log("save model changes -- ajax");
          $.ajax(
          {
            type : "PUT",
            url : "{{server-root}}models/{{_id}}",
            contentType : "application/json",
            data : $.toJSON(model),
            processData : false,
            success : function()
            {
              window.location.reload();
            },
            error : function(request, status, reason_phrase)
            {
              window.alert("Error updating model: " + reason_phrase);
            }
          });
        },
        Cancel: function()
        {
          $(this).dialog("close");
        }
      },
      close: function()
      {
      }
    });

    $("#delete-model-link").click(function(){
      if(!window.confirm("Delete model {{name}}?  This cannot be undone."))
        return false;

  console.log("delete model -- ajax");
      $.ajax(
      {
        type : "DELETE",
        url : "{{server-root}}models/{{_id}}",
        success : function(details)
        {
          window.location.href = "{{server-root}}projects/{{#full-project}}{{_id}}{{/full-project}}";
        },
        error : function(request, status, reason_phrase)
        {
          window.alert("Error deleting model: " + reason_phrase);
        }
      });
    });

    $("#edit-model-button").button().click(function()
    {
      $("#edit-model-form").dialog("open");
      $("#edit-model-name").focus();
    });


    // Layout resizable panels ...
    $("body").layout(
    {
      north:
      {
      },
      center:
      {
      },
      south:
      {
        size: $("body").height() / 2,
        resizeWhileDragging: false,
        onresize: function() {
          $("#table").css("height", $("#table-pane").height());
          $("#table").table("resize_canvas");
        }
      },
    });

    $("#model-pane").layout(
    {
      center:
      {
        resizeWhileDragging: false,
        onresize: function() { 
  // TODO HANDLE IN GRID
  //        $("#scatterplot").scatterplot("option", {
  //          width: $("#scatterplot-pane").width(), 
  //          height: $("#scatterplot-pane").height()
  //        }); 
          $("#scatterplot").grid("option", {
            width: $("#scatterplot-pane").width(), 
            height: $("#scatterplot-pane").height()
          }); 
        },
      }
    });
  };
  //////////////////////////////////////////////////////////////////////////////////////////
  // setup the rest of the ui as data is received.
  //////////////////////////////////////////////////////////////////////////////////////////

  ScatterPlot.prototype.setup_colorswitcher = function() {
console.log("inside setup_colorswitcher()");
    var colormap = bookmark["colormap"] !== undefined ? bookmark["colormap"] : "night";

    $("#color-switcher").colorswitcher({colormap:colormap});
    $("#color-switcher").bind("colormap-changed", function(event, colormap)
    {
      selected_colormap_changed(colormap);
    });
  };

  ScatterPlot.prototype.metadata_loaded = function() {
console.log("inside metadata loaded()");
    console.log(this);
    this.setup_table();

    if(!this.indices && this.table_metadata)
    {
      var count = this.table_metadata["row-count"];
      this.indices = new int32array(count);
      for(var i = 0; i != count; ++i)
        this.indices[i] = i;
    }

    if(this.table_metadata && bookmark)
    {
      // choose some columns for the x and y axes.
      var numeric_variables = [];
      for(var i = 0; i < this.table_metadata["column-count"]-1; i++)
      {
        // only use non-string columns that are not used for ratings or categories
        if(this.table_metadata["column-types"][i] != 'string' && rating_columns.indexof(i) == -1 && category_columns.indexof(i) == -1)
          numeric_variables.push(i);
      }

      this.x_index = numeric_variables[0];
      y_index = numeric_variables[1 % numeric_variables.length];
      if("x-selection" in bookmark)
        this.x_index = number(bookmark["x-selection"]);
      if("y-selection" in bookmark)
        y_index = number(bookmark["y-selection"]);

      // set state of selected and hidden simulations
      selected_simulations = [];
      if("simulation-selection" in bookmark)
        selected_simulations = bookmark["simulation-selection"];
      hidden_simulations = [];
      if("hidden-simulations" in bookmark)
        hidden_simulations = bookmark["hidden-simulations"];

      get_model_array_attribute({
        server_root : "{{server-root}}",
        mid : "{{_id}}",
        aid : "data-table",
        array : 0,
        attribute : this.x_index,
        success : function(result)
        {
          x = result;
          setup_scatterplot();
          this.setup_table();
        },
        error : artifact_missing
      });

      get_model_array_attribute({
        server_root : "{{server-root}}",
        mid : "{{_id}}",
        aid : "data-table",
        array : 0,
        attribute : y_index,
        success : function(result)
        {
          y = result;
          setup_scatterplot();
          this.setup_table();
        },
        error : artifact_missing
      });

      v_index = this.table_metadata["column-count"] - 1;
      if("variable-selection" in bookmark)
        v_index = Number(bookmark["variable-selection"]);

      if(v_index == this.table_metadata["column-count"] - 1)
      {
        var count = this.table_metadata["row-count"];
        v = new Float64Array(count);
        for(var i = 0; i != count; ++i)
          v[i] = i;
        setup_scatterplot();
      }
      else
      {
        get_model_array_attribute({
          server_root : "{{server-root}}",
          mid : "{{_id}}",
          aid : "data-table",
          array : 0,
          attribute : v_index,
          success : function(result)
          {
            v = result;
            setup_scatterplot();
          },
          error : artifact_missing
        });
      }

      images_index = image_columns[0];
      if("images-selection" in bookmark)
        images_index = bookmark["images-selection"];

console.log("GET models/id/arraysets/data-table/arrays/0/attrs -- ajax");
      $.ajax(
      {
        type : "GET",
        url : "{{server-root}}models/{{_id}}/arraysets/data-table/arrays/0/attributes/" 
          + images_index + "/chunk?ranges=0," + this.table_metadata["row-count"],
        success : function(result)
        {
          images = result;
          setup_scatterplot();
          this.setup_table();
        },
        error: artifact_missing
      });
      setup_controls();
    }
  };

  ScatterPlot.prototype.setup_table = function() {
console.log("inside setup_table()");
    if( !this.table_ready && this.table_metadata && (table_statistics.length == this.table_metadata["column-count"]) 
      && bookmark && (this.x_index != null) && (y_index != null) && (images_index != null) 
      && (selected_simulations != null) && (hidden_simulations != null) )
    {
      this.table_ready = true;

      $("#table-pane .load-status").css("display", "none");

      var other_columns = [];
      for(var i = 0; i != this.table_metadata["column-count"] - 1; ++i)
      {
        if($.inArray(i, input_columns) == -1 && $.inArray(i, output_columns) == -1 
          && $.inArray(i, rating_columns) == -1 && $.inArray(i, category_columns) == -1)
          other_columns.push(i);
      }

      var table_options =
      {
        "server-root" : "{{server-root}}",
        mid : "{{_id}}",
        aid : "data-table",
        metadata : this.table_metadata,
        statistics : table_statistics,
        inputs : input_columns,
        outputs : output_columns,
        others : other_columns,
        images : image_columns,
        ratings : rating_columns,
        categories : category_columns,
        "image-variable" : images_index,
        "x-variable" : this.x_index,
        "y-variable" : y_index,
        "row-selection" : selected_simulations,
        hidden_simulations : hidden_simulations
      };

      var colormap = bookmark["colormap"] !== undefined ? bookmark["colormap"] : "night";
      table_options.colormap = $("#color-switcher").colorswitcher("get_color_map", colormap);

      if("sort-variable" in bookmark && "sort-order" in bookmark)
      {
        table_options["sort-variable"] = bookmark["sort-variable"];
        table_options["sort-order"] = bookmark["sort-order"];
      }

      if("variable-selection" in bookmark)
      {
        table_options["variable-selection"] = [bookmark["variable-selection"]];
      }
      else
      {
        table_options["variable-selection"] = [this.table_metadata["column-count"] - 1];
      }

      $("#table").table(table_options);

      // Log changes to the table sort order ...
      $("#table").bind("variable-sort-changed", function(event, variable, order)
      {
        variable_sort_changed(variable, order);
      });

      // Log changes to the x variable ...
      $("#table").bind("x-selection-changed", function(event, variable)
      {
        x_selection_changed(variable);
      });

      // Log changes to the y variable ...
      $("#table").bind("y-selection-changed", function(event, variable)
      {
        y_selection_changed(variable);
      });

      // Log changes to the images variable ...
      $("#table").bind("images-selection-changed", function(event, variable)
      {
        images_selection_changed(variable);
      });

      // Log changes to the table variable selection ...
      $("#table").bind("variable-selection-changed", function(event, selection)
      {
        selected_variable_changed(selection[0]);
      });

      // Log changes to the table row selection ...
      $("#table").bind("row-selection-changed", function(event, selection)
      {
        // The table selection is an array buffer which can't be
        // serialized as JSON, so convert it to an array.
        var temp = [];
        for(var i = 0; i != selection.length; ++i)
          temp.push(selection[i]);
        selected_simulations_changed(temp);
      });

      // Changing the colormap updates the table ...
      $("#color-switcher").bind("colormap-changed", function(event, colormap)
      {
        $("#table").table("option", "colormap", $("#color-switcher").colorswitcher("get_color_map", colormap));
      });

      // Changing the table variable updates the scatterplot ...
      $("#table").bind("variable-selection-changed", function(event, selection)
      {
        update_scatterplot_value(selection[0]);
      });

      // Changing the scatterplot selection updates the table row selection and controls ..
      $("#scatterplot").bind("selection-changed", function(event, selection)
      {
        $("#table").table("option", "row-selection", selection);
        $("#controls").controls("option", "selection", selection);
      });

      // Changing the table row selection updates the scatterplot and controls ...
      $("#table").bind("row-selection-changed", function(event, selection)
      {
        // The table selection is an array buffer, so convert it to an array.
        var temp = [];
        for(var i = 0; i != selection.length; ++i)
          temp.push(selection[i]);

        $("#scatterplot").scatterplot("option", "selection",  temp);
        $("#controls").controls("option", "selection",  temp);
      });

      // Changing the x variable updates the table ...
      $("#controls").bind("x-selection-changed", function(event, variable)
      {
        $("#table").table("option", "x-variable", variable);
      });

      // Changing the y variable updates the table ...
      $("#controls").bind("y-selection-changed", function(event, variable)
      {
        $("#table").table("option", "y-variable", variable);
      });

      // Changing the image variable updates the table ...
      $("#controls").bind("images-selection-changed", function(event, variable)
      {
        $("#table").table("option", "image-variable", variable);
      });

      // Changing the color variable updates the table ...
      $("#controls").bind("color-selection-changed", function(event, variable)
      {
        $("#table").table("option", "variable-selection", [Number(variable)]);
      });
    }
  };

  ScatterPlot.prototype.setup_scatterplot = function() {
console.log("inside setup_scatterplot()");
    // Setup the scatterplot ...
    if(!scatterplot_ready && bookmark && this.indices && x && y && v && images 
      && (selected_simulations != null) && (hidden_simulations != null))
    {
      scatterplot_ready = true;

      $("#scatterplot-pane .load-status").css("display", "none");

      var colormap = bookmark["colormap"] !== undefined ? bookmark["colormap"] : "night";

      $("#scatterplot-pane").css("background", $("#color-switcher").colorswitcher("get_background", colormap).toString());

      var open_images = [];
      if("open-images-selection" in bookmark)
        open_images = bookmark["open-images-selection"];

      $("#scatterplot").scatterplot({
        indices: this.indices,
        x_label: this.table_metadata["column-names"][this.x_index],
        y_label: this.table_metadata["column-names"][y_index],
        v_label: this.table_metadata["column-names"][v_index],
        x: x,
        y: y,
        v: v,
        images: images,
        width: $("#scatterplot-pane").width(),
        height: $("#scatterplot-pane").height(),
        color: $("#color-switcher").colorswitcher("get_color_map", colormap),
        selection: selected_simulations,
        server_root: "{{server-root}}",
        open_images: open_images,
        gradient: $("#color-switcher").colorswitcher("get_gradient_data", colormap),
        hidden_simulations: hidden_simulations
        });

      $("#scatterplot").bind("selection-changed", function(event, selection)
      {
        selected_simulations_changed(selection);
      });

      // Changing the color map updates the scatterplot ...
      $("#color-switcher").bind("colormap-changed", function(event, colormap)
      {
        $("#scatterplot-pane").css("background", $("#color-switcher").colorswitcher("get_background", colormap).toString());
        $("#scatterplot").scatterplot("option", {
          color:    $("#color-switcher").colorswitcher("get_color_map", colormap),
          gradient: $("#color-switcher").colorswitcher("get_gradient_data", colormap),
        });
      });

      // Changing the x variable updates the scatterplot ...
      $("#table").bind("x-selection-changed", function(event, variable)
      {
        update_scatterplot_x(variable);
      });
      $("#controls").bind("x-selection-changed", function(event, variable)
      {
        update_scatterplot_x(variable);
      });

      // Changing the y variable updates the scatterplot ...
      $("#table").bind("y-selection-changed", function(event, variable)
      {
        update_scatterplot_y(variable);
      });
      $("#controls").bind("y-selection-changed", function(event, variable)
      {
        update_scatterplot_y(variable);
      });

      // Changing the images variable updates the scatterplot ...
      $("#table").bind("images-selection-changed", function(event, variable)
      {
console.log("changing the images var updates the scatter plot -- ajax");
        $.ajax(
        {
          type : "GET",
          url : "{{server-root}}models/{{_id}}/arraysets/data-table/arrays/0/attributes/" + 
            variable + "/chunk?ranges=0," + this.table_metadata["row-count"],
          success : function(result)
          {
            $("#scatterplot").scatterplot("option", "images", result);
          },
          error: artifact_missing
        });
      });
      $("#controls").bind("images-selection-changed", function(event, variable)
      {
console.log("GET models/id/attrs / image selection changed -- ajax");
        $.ajax(
        {
          type : "GET",
          url : "{{server-root}}models/{{_id}}/arraysets/data-table/arrays/0/attributes/" + 
            variable + "/chunk?ranges=0," + this.table_metadata["row-count"],
          success : function(result)
          {
            $("#scatterplot").scatterplot("option", "images", result);
          },
          error: artifact_missing
        });
      });

      // Log changes to open images ...
      $("#scatterplot").bind("open-images-changed", function(event, selection)
      {
        open_images_changed(selection);
      });
    }
  };

  ScatterPlot.prototype.setup_controls = function() {
console.log("inside setup_controls()");
    if( !controls_ready && this.table_metadata && (image_columns != null) && (rating_columns != null) 
      && (category_columns != null) && (this.x_index != null) && (y_index != null) 
      && (images_index != null) && (selected_simulations != null) )
    {
      controls_ready = true;
      var numeric_variables = [];

      for(var i = 0; i < this.table_metadata["column-count"]; i++)
      {
        if(this.table_metadata["column-types"][i] != 'string')
          numeric_variables.push(i);
      }

      var color_variable = this.table_metadata["column-count"] - 1;
      if("variable-selection" in bookmark)
      {
        color_variable = [bookmark["variable-selection"]];
      }

      $("#controls").controls({
        "server-root" : "{{server-root}}",
        mid : "{{_id}}",
        model_name: "{{name}}",
        aid : "data-table",
        metadata: this.table_metadata,
        x_variables: numeric_variables.slice(0, numeric_variables.length-1),
        y_variables: numeric_variables.slice(0, numeric_variables.length-1),
        image_variables: image_columns,
        color_variables: [numeric_variables[numeric_variables.length-1]].concat(numeric_variables.slice(0, numeric_variables.length-1)),
        rating_variables : rating_columns,
        category_variables : category_columns,
        selection : selected_simulations,
        "x-variable" : this.x_index,
        "y-variable" : y_index,
        "image-variable" : images_index,
        "color-variable" : color_variable,
      });

      // Changing the x variable updates the controls ...
      $("#table").bind("x-selection-changed", function(event, variable)
      {
        $("#controls").controls("option", "x-variable", variable);
      });

      // Changing the y variable updates the controls ...
      $("#table").bind("y-selection-changed", function(event, variable)
      {
        $("#controls").controls("option", "y-variable", variable);
      });

      // Changing the image variable updates the controls ...
      $("#table").bind("images-selection-changed", function(event, variable)
      {
        $("#controls").controls("option", "image-variable", variable);
      });

      // Changing the table variable updates the controls ...
      $("#table").bind("variable-selection-changed", function(event, selection)
      {
        $("#controls").controls("option", "color-variable", selection[0]);
      });

      // Changing the table variable updates the legend label ...
      $("#table").bind("variable-selection-changed", function(event, selection)
      {
        $("#scatterplot").scatterplot("option", {v_label:this.table_metadata["column-names"][selection[0]]});
      });

      // Changing the color variable updates the scatterplot ...
      $("#controls").bind("color-selection-changed", function(event, variable)
      {
        update_scatterplot_value(variable);
      });

      // Changing the color variable updates the legend label ...
      $("#controls").bind("color-selection-changed", function(event, variable)
      {
        $("#scatterplot").scatterplot("option", {v_label:this.table_metadata["column-names"][variable]});
      });

      // Changing the value of a variable updates the database, table, and scatterplot ...
      $("#controls").bind("set-value", function(event, arguments)
      {
        //console.log("set-value. selection: " + selection + ", variable: " + variable + ", value: " + value);
        var selection = arguments.selection;
        var variable = arguments.variable;
        var myBlob = new Blob(['[' + arguments.value + ']'], {type: "text/html"});

        var hyperslice = "";
        writeData(selection, variable, myBlob, 0);

        function writeData(selection, variable, blob, iterator){
console.log("inside writeData()");
          hyperslice = selection[iterator] + ":" + (selection[iterator]+1);
          var formdata = new FormData();
          // formdata.append("array", 0);
          // formdata.append("attribute", variable);
          // formdata.append("hyperslice", hyperslice);
          formdata.append("hyperchunks", 0 + "/" + variable + "/" + hyperslice);
          formdata.append("data", blob);
console.log("write data PUT models/id/arraysets/data-table/data -- ajax");
          $.ajax({
            type: "PUT",
            url : "{{server-root}}models/{{_id}}/arraysets/data-table/data",
            data : formdata,
            processData: false,
            contentType: false,
            success : function(results)
            {
              console.log("writing array data SUCCESS");
              iterator++;
              if(iterator<selection.length) {
                writeData(selection, variable, blob, iterator);
              } 
              else {
                // Finished writing data, need to update widgets

                $("#table").table("update_data");

                if(variable == this.x_index)
                  update_scatterplot_x(variable);
                if(variable == y_index)
                  update_scatterplot_y(variable);
                if(variable == v_index)
                  update_scatterplot_value(variable);

                load_table_statistics([variable], function(){
                  $("#table").table("option", "statistics", table_statistics);
                });
              }

            },
            error : function(jqXHR, textStatus, errorThrown)
            {
              console.log("writing array data error");
            },
          });
        }

      });

      // Log changes to the x variable ...
      $("#controls").bind("x-selection-changed", function(event, variable)
      {
        x_selection_changed(variable);
      });

      // Log changes to the y variable ...
      $("#controls").bind("y-selection-changed", function(event, variable)
      {
        y_selection_changed(variable);
      });

      // Log changes to the images variable ...
      $("#controls").bind("images-selection-changed", function(event, variable)
      {
        images_selection_changed(variable);
      });

      // Log changes to the color variable ...
      $("#controls").bind("color-selection-changed", function(event, variable)
      {
        selected_variable_changed(Number(variable));
      });

      // Log changes to hidden selection ...
      $("#controls").bind("hide-selection", function(event, selection)
      {
        for(var i=0; i<selected_simulations.length; i++){
          if($.inArray(selected_simulations[i], hidden_simulations) == -1) {
            hidden_simulations.push(selected_simulations[i]);
          }
        }
        hidden_simulations_changed();
        $("#table").table("option", "hidden_simulations", hidden_simulations);
        $("#scatterplot").scatterplot("option", "hidden_simulations", hidden_simulations);
      });

      // Log changes to hidden selection ...
      $("#controls").bind("show-selection", function(event, selection)
      {
        for(var i=0; i<selected_simulations.length; i++){
          var index = $.inArray(selected_simulations[i], hidden_simulations);
          if(index != -1) {
            hidden_simulations.splice(index, 1);
          }
        }
        hidden_simulations_changed();
        $("#table").table("option", "hidden_simulations", hidden_simulations);
        $("#scatterplot").scatterplot("option", "hidden_simulations", hidden_simulations);
      });
    }
  };

  //////////////////////////////////////////////////////////////////////////////////////////
  // Event handlers.
  //////////////////////////////////////////////////////////////////////////////////////////

  ScatterPlot.prototype.selected_colormap_changed = function(colormap) {
console.log("inside selected_colormap_changed()");
console.log("colormap change POST events/models/id/ -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/colormap/" + colormap
    });
    bookmarker.updateState({"colormap" : colormap});
  };

  ScatterPlot.prototype.selected_variable_changed = function(variable) {
console.log("inside selected_variable_chagned()");
console.log("selected variable changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/variable/" + variable
    });
    bookmarker.updateState({"variable-selection" : variable});
    v_index = Number(variable);
  };

  ScatterPlot.prototype.variable_sort_changed = function(variable, order) {
console.log("inside variable sort changed");
console.log("variable sort changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/sort-order/" + variable + "/" + order
    });
    bookmarker.updateState( {"sort-variable" : variable, "sort-order" : order} );
  };

  ScatterPlot.prototype.selected_simulations_changed = function(selection) {
console.log("inside selected simulations changed");
    // Logging every selected item is too slow, so just log the count instead.
console.log("selectred sim changed changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/simulation/count/" + selection.length
    });
    bookmarker.updateState( {"simulation-selection" : selection} );
    selected_simulations = selection;
  };

  ScatterPlot.prototype.x_selection_changed = function(variable) {
console.log("inside x selection changed");
console.log("x selection changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/x/" + variable
    });
    bookmarker.updateState( {"x-selection" : variable} );
    this.x_index = Number(variable);
  };

  ScatterPlot.prototype.y_selection_changed = function(variable) {
console.log("inside y selection changed");
console.log("y selection changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/y/" + variable
    });
    bookmarker.updateState( {"y-selection" : variable} );
  };

  ScatterPlot.prototype.images_selection_changed = function(variable) {
console.log("inside images selection changed");
console.log("images selection changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/images/" + variable
    });
    bookmarker.updateState( {"images-selection" : variable} );
    y_index = Number(variable);
  };

  ScatterPlot.prototype.open_images_changed = function(selection) {
console.log("inside open images  changed");
    // Logging every open image is too slow, so just log the count instead.
console.log("open images changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/openimages/count/" + selection.length
    });
    bookmarker.updateState( {"open-images-selection" : selection} );
  };

  ScatterPlot.prototype.hidden_simulations_changed = function() {
console.log("inside hidden simulations  changed");
    // Logging every hidden simulation is too slow, so just log the count instead.
console.log("hidden simulations changed -- ajax");
    $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/hidden/count/" + hidden_simulations.length
    });
    bookmarker.updateState( {"hidden-simulations" : hidden_simulations} );
  };

  ScatterPlot.prototype.update_scatterplot_value = function(attribute) {
console.log("inside update scatterplot value");
    if(attribute == this.table_metadata["column-count"] - 1)
    {
      var count = v.length;
      for(var i = 0; i != count; ++i)
        v[i] = i;
      $("#scatterplot").scatterplot("option", {v : v});
    }
    else
    {
      get_model_array_attribute({
        server_root : "{{server-root}}",
        mid : "{{_id}}",
        aid : "data-table",
        array : 0,
        attribute : attribute,
        success : function(result)
        {
          v = result;
          $("#scatterplot").scatterplot("option", {v : v});
        },
        error : artifact_missing
      });
    }
  };

  ScatterPlot.prototype.update_scatterplot_x = function(variable) {
console.log("inside update scatterplot x");
    get_model_array_attribute({
      server_root : "{{server-root}}",
      mid : "{{_id}}",
      aid : "data-table",
      array : 0,
      attribute : variable,
      success : function(result)
      {
        $("#scatterplot").scatterplot("option", {x: result, x_label:this.table_metadata["column-names"][variable]});
      },
      error : artifact_missing
    });
  };

  ScatterPlot.prototype.update_scatterplot_y = function(variable) {
console.log("inside update scatterplot y");
    get_model_array_attribute({
      server_root : "{{server-root}}",
      mid : "{{_id}}",
      aid : "data-table",
      array : 0,
      attribute : variable,
      success : function(result)
      {
        $("#scatterplot").scatterplot("option", {y: result, y_label:this.table_metadata["column-names"][variable]});
      },
      error : artifact_missing
    });
  };

  ScatterPlot.prototype.display_image = function(uri) {
console.log("inside display image");
    image_uri.href = uri.substr(0, 5) == "file:" ? uri.substr(5) : uri;
    if(image_uri.hostname in session_cache)
      load_image();
    else
      $("#remote-login").dialog("open");
  };

  ScatterPlot.prototype.load_image = function() {
console.log("inside load image");
    var sid = session_cache[image_uri.hostname];
    image = document.createElement("img");
    image.src = "{{server-root}}remote/" + sid + "/file" + image_uri.pathname;
    image.width = 100;
    image.style.position="absolute";
    image.style.left=10;
    image.style.top=10;
    $("#scatterplot-pane").prepend(image);
  };

  ScatterPlot.prototype.load_table_statistics = function(columns, callback) {
// TODO what's going on with callback in terms of OO? 
// the callback does not contain the same context as "this" here does
console.log(this);
console.log("inside load table statistics");
    var requests = Array();
    for(var i=0; i<columns.length; i++)
    {
console.log("request push -" + columns[i] + " -- ajax");
      requests.push(
        $.ajax({
          url : "{{server-root}}models/{{_id}}/arraysets/data-table/arrays/0/attributes/" + columns[i] + "/statistics",
          contentType : "application/json",
        })
      );
    }
    var defer = $.when.apply($, requests);
    defer.done(function(){
      // This is executed only after every ajax request has been completed
      $.each(arguments, function(index, responseData){
        // "responseData" contains an array of response information for each specific request
        table_statistics[parseInt(columns[index])] = responseData.length == undefined ? responseData : responseData[0];
      });
      callback();
    });
  };

  function jQueryWithContext(selector) {
    return $(selector);
  }

  $(".plot").each(function() {
    scatter_plot = new ScatterPlot($(this).attr("id"));
    scatter_plot.load_model();
    scatter_plot.setup_layout();
  });
});

