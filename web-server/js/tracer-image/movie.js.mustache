/*
 Copyright 2013, Sandia Corporation. Under the terms of Contract
 DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains certain
 rights in this software.
 */

function Movie(plot) {
  // a plot has access to the image set for the specific cell of the grid
  this.plot = plot;
  this.open = false;
  this.stopped = true;
  this.container = this.plot.plot_ref + " .movie";
  this.frame = null;
  this.d3_movie = null;
  this.interval = 400;
  this.current_image = null;
  // TODO leverage bookmarker here for state of movie
  // start out of range and we increment when we ask for the next image
  this.current_image_index = -1;
  this.height = null;
  this.width = null;
  this.loaded_image_count = 0;
  this.errored_image_count = 0;
  this.open_control = null; //handle to foreignObject so SVG can manipulate
  $(this.container).hide();
  
  //Test for which video types are supported
  var formats = {webm:"webm", h264:"mp4"};
  this.movie = [];
  this.video_type = ["webm", "h264"].filter(function(encoding){return Modernizr.video[encoding];})
                        .map(function(encoding){return formats[encoding];})[0];
  this.fps = 25;
}

Movie.prototype.add_loader = function() {
  var self = this;
  this.show();
  if(!this.loader){
    this.loader = new LoadingAnimation({
      start : this.loaded_image_count,
      end : this.plot.scatterplot_obj.scatterplot("get_option", "images").filter(function(x){return x.length > 0;}).length,
      errored : this.errored_image_count,
      selector : this.plot.grid_ref,
      radius : function(){return 3*self.plot.scatterplot_obj.attr("height") / 8},
      complete_callback : function(){
          self.built = true;
          self.play();
        },
      resize_parent : $(this.plot.scatterplot_obj.scatterplot("get_option", "display_pane")),
    });
  }
  else {
    this.loader.options.start = this.loaded_image_count;
  }
  this.loader.init();
}

Movie.prototype.build_movie = function() {
  var self = this;
  // TODO images for "image set"
  // TODO this may just work after LG fixes controls wrt image set??
  
  if(!self.built) {
    self.add_loader();
  }

  if(!self.d3_movie) {
    self.frame = d3.select(self.container).append("rect")
      .attr("class", "outline")
      .attr("x", 0)
      .attr("y", 0)
      .style("stroke", "black")
      .style("stroke-width", "1px")
      .style("fill", "white");

    self.d3_movie = d3.select(this.container).selectAll("image")
      .data(self.plot.images.filter(function(d){return d.length > 0;}))
      .enter().append("image")
      .attr("y", 1)
      .attr({ "xlink:href" : function(d) {return self.plot.image_url_for_session(d);},
        })
      .style("visibility", function(_,i) {return i == 0 ? "visible" : "hidden";})
      .each(function(d,i){
          $(this)
            .load( function(){ self.loaded_image_count++; self.loader.update(1); })
            .error( function(){ self.errored_image_count++; self.loader.update_error(1); });
        });
  }

  self.build_close_button(d3.select(self.container));
};

Movie.prototype.build_open_button = function(container) {
  var self = this;

  var width = 28,
      height = 28;

  self.open_control = container.append('g')
    .classed('open-movie', true)
    .on('click', function() {
      d3.event.stopPropagation();
      if(!self.agent_id){
        self.agent_id = login.get_agent(self.plot.images.filter(function(x){return x;})[0]);
      }
      self.agent_id ? self.build_server_movie.call(self) : login.show_prompt(self.plot.images.filter(function(uri){return uri;}).map(function(uri){return {uri: uri};}), self.build_server_movie, self);
    })
    .on('mousedown', function() {
      d3.event.stopPropagation();
    })
    .on('mouseup', function() {
      d3.event.stopPropagation();
    })
    .attr('width', width)
    .attr('height', height);

  var radius = self.open_control.attr('width')/2;

  self.open_control.append('image')
      .attr('xlink:href', this.plot.scatterplot_obj.scatterplot("get_option", "server_root") +
        "css/build-movie.png")
      .attr('transform', 'translate(' + self.open_control.attr("width")/2 + ',0)')
      .attr('width', width)
      .attr('height', height);

};

Movie.prototype.build_close_button = function(container) {
  var self = this;
  var close_button = container.append("g")
        .classed("close-movie", true);
  close_button.append("rect")
    .attr("x", 5)
    .attr("y", 5)
    .attr("width", 16)
    .attr("height", 16)
    .attr("rx", 2)
    .attr("ry", 2)
    .style("fill", "rgba(0%,0%,0%,0.2)")
    .on("click", function() {
      self.hide();
    });
  close_button.append("path")
    .attr("d", "M" + (8) + " " + (8) + " l10 10 m0 -10 l-10 10")
    .style("stroke", "rgba(100%,100%,100%, 0.8)")
    .style("stroke-width", 3)
    .style("pointer-events", "none");
};

Movie.prototype.show = function() {
  var self = this;
  // TODO .show() for reopens
  $(self.plot.plot_ref + ' .scatterplot').hide();
  $('svg .image-layer').hide();
  self.open = true;
  self.resize();
  $(self.container).show();
};

Movie.prototype.resize = function() {
  var self = this;
  if (self.built && self.open) { // a) prevent it from breaking if called before movie built, b) unnecessary to update while hidden
    var plot = $(this.plot.plot_ref + ' .scatterplot');
    self.height = Number(plot.attr("height"));
    self.width = Number(plot.attr("width"));
    self.d3_movie
      .attr("width", self.width + 1)
      .attr("height", self.height + 1);
    self.frame
      .attr("width", self.width + 3)
      .attr("height", self.height + 3);
  }
};

Movie.prototype.hide = function() {
  var self = this;
  $(self.container).remove();
  $(self.plot.plot_ref + ' .scatterplot').show();
  $('svg .image-layer').show();
  $('.open-movie').show();
};

Movie.prototype.next_image = function() {
  this.increment_current_image_index();
  if(this.plot.images) {
    this.current_image = this.plot.images[this.current_image_index];
  }
  return this.current_image;
};

Movie.prototype.increment_current_image_index = function() {
  // TODO consider direction of play when we get there
  if(this.plot.images && this.current_image_index >= this.plot.images.length) {
    this.current_image_index = 0;
  }
  this.current_image_index = this.current_image_index + 1;
};

Movie.prototype.build_server_movie = function() {
  var self = this;
  var image_index = this.plot.images_index;
  self.agent_id = login.get_agent(this.plot.images.filter(function(url){return url && url.length > 0})[0]);
  $('.open-movie').hide();

  if(!self.movie[image_index]){
    model.get_image_column(this.plot.images_index, function(images) {
      $.ajax({
        type: "POST",
        url: "{{server-root}}agents/" + self.agent_id + "/videos",
        contentType: "application/json",
        data: JSON.stringify({
          "content-type": "video/" + self.video_type,
          images: images
                    .filter(function(url){ return url != null && url.length > 0; })
                    .map(function(url){return url.slice(url.split("/", 3).join().length)})
        }),
        success: function(movie){
          self.movie[image_index] = movie;
          self.show_movie(image_index);
        }
      });
    });
  }
  else{
    self.build_movie_player(image_index);
  }
}

Movie.prototype.build_controls = function(container) {
  var self = this;

  var toggle_pause_play = function(){
    var video_update = self.video.paused() ? self.video.play() : self.video.pause();
  };

  var step = function(steps){
    return function(){
      var current_frame = self.video.currentTime() * self.fps;
      self.video.currentTime((current_frame + steps)/self.fps);
    }
  };

  var set_position = function(time){
    return function(){
      self.video.currentTime(time);
    }
  };

  var toggle_repeat = function(){
    self.video.loop(!self.video.loop());
    d3.select("#movie-loop-toggle").attr("opacity", self.video.loop() ? 1 : 0)
  }

  var controls = [{name: "Play", id: "play-pause", action: toggle_pause_play, image: "css/play.png"},
      {name: "Go to Beginning", id: "begin", action: set_position(0), image: "css/rewind.png"},
      {name: "Step Back", id: "back", action: step(-1), image: "css/frame-rewind.png"},
      {name: "Step Forward", id: "forward", action: step(1), image: "css/frame-forward.png"},
      {name: "Go to end", id: "end", action: set_position(this.video.duration()), image: "css/fast-forward.png"},
      {name: "Loop", id: "repeat", action: toggle_repeat, image: "css/repeat.png"}];

  var control_pane = container.append('rect')
      .attr({
        height: 30 * controls.length,
        width: 34,
        rx: 2,
        ry: 2,
        style: "fill: rgba(0, 0, 0, 0.2);",
      })
  var built_controls = {};

  controls.forEach(function(control, index){
    built_controls[control.id] = container
      .append("image")
        .attr({"xlink:href": "{{server-root}}" + control.image,
          width: 28,
          height: 28,
          y: 30*index,
          x: 2,
          id: "movie-" + control.id})
        .on("click", control.action);
  });

  container
    .insert('rect', '#movie-repeat')
      .attr({
        id : "movie-loop-toggle",
        width : repeat.attr("width"),
        height : repeat.attr("height"),
        x : repeat.attr("x"),
        y : repeat.attr("y"),
        rx : 2,
        ry : 2,
        fill : "#ff0",
        "fill-opacity" : "0.3",
        stroke : "#ff0",
        "stroke-opacity" : "0.8",
        opacity : 0
      });

  this.video.on("playing", function(){built_controls["play-pause"].attr("href", "{{server-root}}css/pause.png")})
  this.video.on("pause", function(){built_controls["play-pause"].attr("href", "{{server-root}}css/play.png")})
}

Movie.prototype.show_movie = function(image_index) {
  var video_progress = "Creating video.";
  var self = this;

  var wait_until_build = function(){
    setTimeout(function(){$.ajax({
        type: "GET",
        accepts: "application/json",
        url: "{{server-root}}agents/" + self.agent_id + "/videos/" + self.movie[image_index].sid + "/status",
        success: function(result){
          if(result.message == "Creating video." || result.message == "Not ready."){
            wait_until_build();
            return;
          }
          self.build_movie_player(image_index);
        },
        error: function(){
          console.debug(arguments);
        }
      });}, 1000);
  }

  wait_until_build();
}

Movie.prototype.build_movie_player = function(image_index){
  var width = $(this.plot.grid_ref).attr("width") - 56;
  var height = $(this.plot.grid_ref).attr("height");
  
  $(this.plot.plot_ref + ' .scatterplot').hide();
  $('svg .image-layer').hide();

  this.video = d3.select(this.plot.plot_ref)
    .insert("g", ":first-child")
      .classed("movie", true)

  this.build_close_button(d3.select(this.container));

  this.video = this.video
    .append("foreignObject")
      .attr({
        width: width,
        height: height,
        x: 28
      })
    .append("xhtml:body")
      .style("background", "transparent")
    .append("xhtml:video")
      .attr({
        id: "test_video",
        preload:true,
        height: height,
        width: width,
        x: 32
      })

  if(navigator.userAgent.match("WebKit")){
    var offset = $(this.plot.grid_ref).attr("transform").split(/[( ,)]/);
    var left = Number(offset[1]) + 28;
    var top = Number(offset[2]);
    //WebKit has a bug with rendering video elements in an svg foreignObject:
    this.video.attr("style", "position: relative; left: " + left + "px; top: " + top + "px;") 
  }

  this.video
    .append("xhtml:source")
      .attr({
        src: "{{server-root}}agents/" + this.agent_id + "/videos/" + this.movie[image_index].sid,
        type: "video/" + this.video_type
      });

  var self = this;

  this.video = new Popcorn(this.plot.plot_ref + " video");
  this.video.on("loadeddata", function(){
      self.setup_hooks.call(self);
      self.build_controls.call(self, d3.select(self.container).append("g").attr("transform", "translate(0,30)"));
    })
}

Movie.prototype.get_status = function(image_index) {
  $.ajax({
    type: "GET",
    url : "{{server-root}}agents/" + this.agent_id + "/videos/" + this.movie[image_index].sid + "/status",
    success : function(){console.debug(arguments)},
    error : function(){console.debug(arguments)},
  });
}

Movie.prototype.setup_hooks = function(){
  var self = this;
  var indices = this.plot.images.map(function(x,i){return [x,i];}).filter(function(value){return value[0];});
  //For now, our framerate is 25 frames/second, which is the default default for ffmpeg.
  var timify = function(frame_number, repetitions){
    var value = Math.floor(frame_number/self.fps);
    for(var i = 0; i < repetitions; i++){
      value = Math.floor(value/60);
    }
    return value;
  };

  var update_events = [];

  for(var i = 0; i < this.video.duration() * this.fps; i++){
    //In the SMPTE format: HH:MM:SS.Frame
    var time = timify(i, 3) + ":" + (timify(i, 2) % 60) + ":" + (timify(i, 1) % 60) + "." + (i % this.fps);

    var update_index = (function(idx, indices){
      return function(paused){
        if(paused){
          table.select_rows([indices[idx][1]]);
          return;
        }
        $(".scatterplot").scatterplot("option", "selection", [indices[idx][1]]);
      };
    })(i, indices);

    update_events[i] = update_index;
  }

  this.video.on("timeupdate", function(){
    update_events[Math.floor(d3.min([self.video.currentTime() * self.fps, update_events.length - 1]))](self.video.paused());
  });

  this.video.on("pause", function(){
    update_events[Math.floor(d3.min([self.video.currentTime() * self.fps, update_events.length - 1]))](true);
  });
} 
