function ScatterPlot(plot_id, grid_ref, scalar) {
  console.log("Setup scatter plot");

  this.grid_ref = grid_ref; // DOM for parent
  this.plot_id = plot_id;
  this.plot_ref = "#" + plot_id;  // DOM plot ref
  this.controls = null;
  this.movie = null;

  this.x_index = null;
  this.y_index = null;
  this.v_index = null;
  this.images_index = null;
  this.x = null;
  this.y = null;
  this.v = null;
  this.images = null;
  this.selected_simulations = null;
  this.hidden_simulations = null;

  this.ready = false;
  this.controls_ready = false;

  this.image_uri = document.createElement("a");

  this.scalar = scalar || {x:1, y:1};

  this.setup_dom();
}

ScatterPlot.prototype.show = function() {
  $(this.plot_ref + " .scatterplot").show();
};

ScatterPlot.prototype.hide = function() {
  $(this.plot_ref + " .scatterplot").hide();
};

ScatterPlot.prototype.setup_dom = function() {
  console.debug("setting up DOM for plot");
  //Have to initialize with the d3 builder, or doesn't want to show:
  var group = d3.select($(this.grid_ref)[0]).append("g").attr({class: "plot", id: this.plot_id});
  var pane = group.append("g").attr({class: "scatterplot-pane"});
  pane.append("g").attr({class: "load-status"});
  pane.append("g").attr({class: "scatterplot"});
  pane.append("g").attr({class: "controls"});
  pane.append("g").attr({class: "movie"});
};

ScatterPlot.prototype.setup_labels = function() {
  console.debug("setting up labels for plot");
  // choose some columns for the x and y axes.
  var numeric_variables = model.get_numeric_variables();
  this.x_index = numeric_variables[0];
  this.y_index = numeric_variables[1 % numeric_variables.length]; // use 0 if only one element, use 1 otherwise
  if("x-selection-" + this.plot_id in layout.bookmark) {
    this.x_index = Number(layout.bookmark["x-selection-" + this.plot_id]);
  }
  if("y-selection-" + this.plot_id in layout.bookmark) {
    this.y_index = Number(layout.bookmark["y-selection-" + this.plot_id]);
  }
};

ScatterPlot.prototype.setup_simulations = function() {
  console.debug("setting up sims for plot");
  // set state of selected and hidden simulations
  this.selected_simulations = [];
  if("simulation-selection" in layout.bookmark)
    this.selected_simulations = layout.bookmark["simulation-selection"];
  this.hidden_simulations = [];
  if("hidden-simulations" in layout.bookmark)
    this.hidden_simulations = layout.bookmark["hidden-simulations"];
};

ScatterPlot.prototype.resize = function() {
  $(this.plot_ref + " .scatterplot").scatterplot("option", {
    width: $(this.plot_ref + ".scatterplot-pane").width(),
    height: $(this.plot_ref + ".scatterplot-pane").height()
  });
  this.movie.resize();
};

ScatterPlot.prototype.update_axis = function(index, axis) {
  var self = this;
  get_model_array_attribute({
    server_root : "{{server-root}}",
    mid : "{{_id}}",
    aid : "data-table",
    array : 0,
    attribute : index,
    success : function(result) {
      self[axis] = result;
      self.setup();
      // TODO refactor to setup the table ONCE after all ajax requests// table.setup();
    },
    error : artifact_missing
  });
};

ScatterPlot.prototype.setup = function() {
  console.debug("inside PLOT setup()");
  // Setup the scatterplot ...
  if(!this.ready && layout.bookmark && model.indices && this.x && this.y && this.v && this.images
     && (this.selected_simulations != null) && (this.hidden_simulations != null))
  {
    var self = this;
    this.ready = true;

    // add our movie here so it can immediately reference images
    this.movie = new Movie(this);

    $(this.plot_ref + " .scatterplot-pane .load-status").hide();

    var colormap = layout.bookmark["colormap"] !== undefined ? layout.bookmark["colormap"] : "night";

    $(this.plot_ref).parents("svg").css("background", $("#color-switcher").colorswitcher("get_background", colormap).toString());

    var open_images = [];
    if("open-images-selection" in layout.bookmark)
      open_images = layout.bookmark["open-images-selection"];

    //Get the first parent that has a defined size, and fill it
    //TODO: Adjust this, the size should likely be calculated based on siblings
    var sized_parent = $("#grid-pane");

    $(this.plot_ref + " .scatterplot").scatterplot({
      scatterplot_obj: self,
      indices: model.indices,
      display_pane: "#grid-pane",
      dimension_adjustments: {
          width: function(){return 0;},
          height: function(){return -1 * $(self.grid_ref + " .controls").height(); }},
      x_label: model.metadata["column-names"][self.x_index],
      y_label: model.metadata["column-names"][self.y_index],
      v_label: model.metadata["column-names"][self.v_index],
      x: self.x,
      y: self.y,
      v: self.v,
      t: self.t,
      images: self.images,
      width: sized_parent.width(),
      height: sized_parent.height(),
      color: $("#color-switcher").colorswitcher("get_color_map", colormap),
      selection: self.selected_simulations,
      server_root: "{{server-root}}",
      open_images: open_images,
      gradient: $("#color-switcher").colorswitcher("get_gradient_data", colormap),
      hidden_simulations: self.hidden_simulations,
      scalar: self.scalar
    });

    $(self.plot_ref + " .scatterplot").bind("selection-changed", function(event, selection) {
      self.selected_simulations_changed(selection);
    });

    // Changing the color map updates the scatterplot ...
    $("#color-switcher").bind("colormap-changed", function(event, colormap) {
      $(self.plot_ref).parents("svg").css("background", $("#color-switcher").colorswitcher("get_background", colormap).toString());
      $(self.plot_ref + " .scatterplot").scatterplot("option", {
        color:    $("#color-switcher").colorswitcher("get_color_map", colormap),
        gradient: $("#color-switcher").colorswitcher("get_gradient_data", colormap),
      });
    });

    /* TODO: implement the table controls to sync with a 'selected plot'
    // Changing the x variable updates the scatterplot ...
    $("#table").bind("x-selection-changed", function(event, variable) {
      self.update_x(variable);
    });
    */
    $(this.plot_ref + " .controls").bind("x-selection-changed", function(event, variable) {
      self.update_x(variable);
    });

    /* TODO: implement the table controls to sync with a 'selected plot'
    // Changing the y variable updates the scatterplot ...
    $("#table").bind("y-selection-changed", function(event, variable) {
      self.update_y(variable);
    });*/
    $(this.plot_ref + " .controls").bind("y-selection-changed", function(event, variable) {
      self.update_y(variable);
    });

    /* TODO: implement the table controls to sync with a 'selected plot'
    // Changing the images variable updates the scatterplot ...
    $("#table").bind("images-selection-changed", function(event, variable) {
      console.debug("changing the images var updates the scatter plot -- ajax");
      $.ajax(
        {
          type : "GET",
          url : "{{server-root}}models/{{_id}}/arraysets/data-table/arrays/0/attributes/" +
            variable + "/chunk?ranges=0," + model.metadata["row-count"],
          success : function(result)
          {
            $(self.plot_ref + " .scatterplot").scatterplot("option", "images", result);
          },
          error: artifact_missing
        });
    });*/
    $(this.plot_ref + " .controls").bind("images-selection-changed", function(event, variable) {
      console.debug("GET models/id/attrs / image selection changed -- ajax");
      $.ajax(
        {
          type : "GET",
          url : "{{server-root}}models/{{_id}}/arraysets/data-table/arrays/0/attributes/" +
            variable + "/chunk?ranges=0," + model.metadata["row-count"],
          success : function(result)
          {
            $(self.plot_ref + " .scatterplot").scatterplot("option", "images", result);
          },
          error: artifact_missing
        });
    });

    // Log changes to open images ...
    $(self.plot_ref + " .scatterplot").bind("open-images-changed", function(event, selection) {
      self.open_images_changed(selection);
    });
  }
};

ScatterPlot.prototype.selected_variable_changed = function(variable) {
  console.debug("inside selected_variable_chagned()");
  console.debug("selected variable changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/variable/" + variable
    });
  layout.bookmarker.updateState({"variable-selection" : variable});
  this.v_index = Number(variable);
};

ScatterPlot.prototype.selected_simulations_changed = function(selection) {
  console.debug("inside selected simulations changed");
  // Logging every selected item is too slow, so just log the count instead.
  console.debug("selectred sim changed changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/simulation/count/" + selection.length
    });
  layout.bookmarker.updateState( {"simulation-selection" : selection} );
  this.selected_simulations = selection;
};

ScatterPlot.prototype.x_selection_changed = function(variable) {
  console.debug("inside x selection changed");
  console.debug("x selection changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/x/" + variable
    });
  stateToUpdate = {};
  stateToUpdate["x-selection-" + this.plot_id] = variable;
  layout.bookmarker.updateState(stateToUpdate);
  this.x_index = Number(variable);
};

ScatterPlot.prototype.y_selection_changed = function(variable) {
  console.debug("inside y selection changed");
  console.debug("y selection changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/y/" + variable
    });
  stateToUpdate = {};
  stateToUpdate["y-selection-" + this.plot_id] = variable;
  layout.bookmarker.updateState(stateToUpdate);
};

ScatterPlot.prototype.images_selection_changed = function(variable) {
  console.debug("inside images selection changed");
  console.debug("images selection changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/images/" + variable
    });
  layout.bookmarker.updateState( {"images-selection" : variable} );
  this.y_index = Number(variable);
};

ScatterPlot.prototype.open_images_changed = function(selection) {
  console.debug("inside open images  changed");
  // Logging every open image is too slow, so just log the count instead.
  console.debug("open images changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/openimages/count/" + selection.length
    });
  layout.bookmarker.updateState( {"open-images-selection" : selection} );
};

ScatterPlot.prototype.hidden_simulations_changed = function() {
  console.debug("inside hidden simulations  changed");
  // Logging every hidden simulation is too slow, so just log the count instead.
  console.debug("hidden simulations changed -- ajax");
  var self = this;
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/hidden/count/" + self.hidden_simulations.length
    });
  layout.bookmarker.updateState( {"hidden-simulations" : self.hidden_simulations} );
};

ScatterPlot.prototype.update_value = function(attribute) {
  console.debug("inside update scatterplot value");
  var self = this;
  if(attribute == model.metadata["column-count"] - 1)
  {
    var count = this.v.length;
    for(var i = 0; i != count; ++i)
      self.v[i] = i;
    $(self.plot_ref + " .scatterplot").scatterplot("option", {v : self.v});
  }
  else
  {
    get_model_array_attribute({
      server_root : "{{server-root}}",
      mid : "{{_id}}",
      aid : "data-table",
      array : 0,
      attribute : attribute,
      success : function(result)
      {
        $(self.plot_ref + " .scatterplot").scatterplot("option", {v : result});
      },
      error : artifact_missing
    });
  }
};

ScatterPlot.prototype.update_x = function(variable) {
  console.debug("inside update scatterplot x");
  var self = this;
  get_model_array_attribute({
    server_root : "{{server-root}}",
    mid : "{{_id}}",
    aid : "data-table",
    array : 0,
    attribute : variable,
    success : function(result)
    {
      console.log("update x ajax returned!!!!!");
      $(self.plot_ref + " .scatterplot").scatterplot("option", {x: result, x_label:model.metadata["column-names"][variable]});
    },
    error : artifact_missing
  });
};

ScatterPlot.prototype.update_y = function(variable) {
  console.debug("inside update scatterplot y");
  var self = this;
  get_model_array_attribute({
    server_root : "{{server-root}}",
    mid : "{{_id}}",
    aid : "data-table",
    array : 0,
    attribute : variable,
    success : function(result)
    {
      $(self.plot_ref + " .scatterplot").scatterplot("option", {y: result, y_label:model.metadata["column-names"][variable]});
    },
    error : artifact_missing
  });
};

ScatterPlot.prototype.display_image = function(uri) {
  console.debug("inside display image");
  if(login.logged_into_host_for_file(file))
    this.load_image();
  else
    login.show_prompt();
};

ScatterPlot.prototype.load_image = function() {
  console.debug("inside load image");
  var sid = login.sid_for_file(file);
  image = document.createElement("img");
  image.src = "{{server-root}}remote/" + sid + "/file" + image_uri.pathname;
  image.width = 100;
  image.style.position="absolute";
  image.style.left=10;
  image.style.top=10;
  $(this.plot_ref + " .scatterplot-pane").prepend(image);
};
