#!/usr/bin/env python

import os
import subprocess
import sys

if sys.argv[1:2] == ["config"]:
  sys.stdout.write("graph_title Slycat Memory\n")
  sys.stdout.write("graph_category slycat\n")
  sys.stdout.write("graph_info Tracks Slycat Web Server memory usage.\n")
  sys.stdout.write("graph_vlabel Bytes\n")

  sys.stdout.write("web_server_memory_size.label Web server virtual memory size\n")
  sys.stdout.write("web_server_memory_resident.label Web server resident memory size\n")
  sys.stdout.write("web_server_memory_share.label Web server shared memory size\n")
  sys.stdout.write("web_server_memory_data.label Web server data memory size\n")
else:
  try:
    page_size = subprocess.Popen(["getconf", "PAGESIZE"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = page_size.communicate()
    page_size = int(stdout)

    pid = subprocess.Popen(["pgrep", "-f", "slycat-web-server"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = pid.communicate()
    pid = int(stdout)

    memory = open("/proc/%s/statm" % pid).read().split()

    sys.stdout.write("web_server_memory_size.value %s\n" % (int(memory[0]) * page_size))
    sys.stdout.write("web_server_memory_resident.value %s\n" % (int(memory[1]) * page_size))
    sys.stdout.write("web_server_memory_share.value %s\n" % (int(memory[2]) * page_size))
    sys.stdout.write("web_server_memory_data.value %s\n" % (int(memory[5]) * page_size))

  except Exception as e:
    sys.stdout.write("web_server_memory_size.value U\n")
    sys.stdout.write("web_server_memory_resident.value U\n")
    sys.stdout.write("web_server_memory_share.value U\n")
    sys.stdout.write("web_server_memory_data.value U\n")

